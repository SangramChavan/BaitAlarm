package com.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;

import org.w3c.css.sac.InputSource;
import org.w3c.dom.css.CSSRule;
import org.w3c.dom.css.CSSRuleList;
import org.w3c.dom.css.CSSStyleDeclaration;
import org.w3c.dom.css.CSSStyleRule;
import org.w3c.dom.css.CSSStyleSheet;

import com.steadystate.css.parser.CSSOMParser;

public class CSSParserDemo {
	public static void main(String[] args) {
		loadCSSStyle("D:\\work\\project\\EarlyDisaster\\DisasterWarningWeb\\WebContent\\theme\\looks.css");
	}
	public void selectTagTypes(ArrayList<String> styleList){
		ArrayList<String> tagSelector=new ArrayList<String>();
		ArrayList<String> classSelector=new ArrayList<String>();
		ArrayList<String> idSelector=new ArrayList<String>();
		ArrayList<String> otherSelector=new ArrayList<String>();
		
		for (Iterator iterator = styleList.iterator(); iterator.hasNext();) {
			String styleSelector = (String) iterator.next();
			if(styleSelector.indexOf("#")!=-1){	// id selector
				idSelector.add(styleSelector);
			}
			if(styleSelector.indexOf(".")!=-1){	// id selector
				
			}
			
		}
	}
	private void filter(CSSStyleRule styleRule){
		  String[] selectorComponents=styleRule.getSelectorText().split("\\s*,\\s*");
		  StringBuilder selectorText=new StringBuilder();
		  String selectorComponentSeparator="";
		  String namespacedIdSelector=String.format("#%s-$1",namespace);
		  String namespacedHTMLSelector=String.format("$1 #%s $2",namespace);
		  for (int i=0; i < selectorComponents.length; i++) {
		    selectorText.append(selectorComponentSeparator);
		    selectorComponentSeparator=",";
		    String selectorComponent=selectorComponents[i];
		    selectorComponent=BODY_WITH_ID_SELECTOR_PATTERN.matcher(selectorComponent).replaceAll("$1$2");
		    selectorComponent=BODY_SELECTOR_PATTERN.matcher(selectorComponent).replaceAll("$1#$2");
		    selectorComponent=ID_SELECTOR_PATTERN.matcher(selectorComponent).replaceAll(namespacedIdSelector);
		    String result=HTML_SELECTOR_PATTERN.matcher(selectorComponent).replaceAll(namespacedHTMLSelector);
		    if (selectorComponent.equalsIgnoreCase(result)) {
		      selectorText.append('#').append(namespace).append(' ').append(selectorComponent);
		    }
		 else {
		      selectorText.append(result);
		    }
		  }
		  styleRule.setSelectorText(selectorText.toString());
		}
	public static ArrayList<String> loadCSSStyle(String filePath) {
		ArrayList<String> styleList=new ArrayList<String>();
		try {
			InputStream stream = new FileInputStream(new File(filePath));
			// wrap as an InputSource
			InputSource source = new InputSource(new InputStreamReader(stream));

			// instantiate a parser
			CSSOMParser parser = new CSSOMParser();
			CSSStyleSheet stylesheet = parser.parseStyleSheet(source, null,null);
			CSSRuleList ruleList = stylesheet.getCssRules();
			for (int i = 0; i < ruleList.getLength(); i++) {
				CSSRule rule = ruleList.item(i);
				if (rule instanceof CSSStyleRule) {
					CSSStyleRule styleRule = (CSSStyleRule) rule;
					System.out.println("selector: "+ styleRule.getSelectorText());
					styleList.add(styleRule.getSelectorText());
					
					CSSStyleDeclaration styleDeclaration = styleRule.getStyle();
					
//					for (int j = 0; j < styleDeclaration.getLength(); j++) {
//						String property = styleDeclaration.item(j);
//						System.out.println("property: " + property);
//						System.out.println("value: "+ styleDeclaration.getPropertyCSSValue(property).getCssText());
//					}
				}
			}
		} catch (Exception t) {
			t.printStackTrace();
		}
		return styleList;
	}
	public static void showCSSStyle(String filePath) {
		try {
			InputStream stream = new FileInputStream(new File(filePath));
			// wrap as an InputSource
			InputSource source = new InputSource(new InputStreamReader(stream));

			// instantiate a parser
			CSSOMParser parser = new CSSOMParser();
			CSSStyleSheet stylesheet = parser.parseStyleSheet(source, null,
					null);

			CSSRuleList ruleList = stylesheet.getCssRules();
			for (int i = 0; i < ruleList.getLength(); i++) {
				CSSRule rule = ruleList.item(i);

				if (rule instanceof CSSStyleRule) {

					CSSStyleRule styleRule = (CSSStyleRule) rule;

					System.out.println("selector: "
							+ styleRule.getSelectorText());

					CSSStyleDeclaration styleDeclaration = styleRule.getStyle();
					
					for (int j = 0; j < styleDeclaration.getLength(); j++) {

						String property = styleDeclaration.item(j);

						System.out.println("property: " + property);

						System.out.println("value: "
								+ styleDeclaration
										.getPropertyCSSValue(property)
										.getCssText());

					}
				}
			}
		} catch (Exception t) {
			t.printStackTrace();
		}
	}
}
